package ftp;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * This class is used by Log class to generate its own usable instance of Apache's FTP client
 * Each Log generated by the logger will then upload its own log using its respective FtpClientLogger
 */
public class FtpClientLogger extends Thread {

    FTPClient ftpClient;
    String fileDirectory;
    String fileName;
    float sleepInterval;
    SimpleDateFormat dateFormatter;
    String newLogPath;
    String newLogFileName;
    File localLog;
    File rotatingLog;

    final int MINUTE_MULTIPLIER = 60000;

    /**
     * Once initialized, the Logger class  will call on the run method of this thread class to begin waiting for a
     * chance to upload the current log file to server specified in config via FTP.
     * If the log file is empty, the thread will fall back asleep and wait for
     * the next chance.  If it is not empty, the thread will get the current date/time and update the name of the log
     * with this timestamp. Upload will then commence.
     *
     * The log class will provide the following parameters to fire up the FTP Client:
     *
     * @param host
     * @param port
     * @param username
     * @param password
     * @param fileDirectory
     * @param fileName
     * @param intervalInMinutes
     */
    public FtpClientLogger(String host, int port, String username, String password, String fileDirectory, String fileName, float intervalInMinutes) {

        ftpClient = new FTPClient();
        this.fileDirectory = fileDirectory;
        this.fileName = fileName;
        this.sleepInterval = intervalInMinutes * MINUTE_MULTIPLIER;
        this.dateFormatter = new SimpleDateFormat("_yyyyMMdd_HHmmss");
        this.newLogPath = "";

        try {
            System.out.println("Connecting...");
            ftpClient.connect(host, port);
            System.out.println("Done connecting!");
            ftpClient.login(username, password);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
        } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    /**
     * The main sleeper function. In here is logic that will not upload any empty log files, and the logic to upload
     * the current log with the proper timestamp
     */
    public void run() {
        while (true) {//Run this thread indefinitely until it is interrupted
            try {
                System.out.println("Go to Sleep...");
                this.sleep((long) sleepInterval);

                localLog = new File(fileDirectory + fileName);

                if (localLog.length() == 0)//If file is empty, go back to sleep and do not upload
                    continue;

                newLogFileName = newFileName();
                String newLogPath = fileDirectory + newLogFileName;
                File rotatedFile = new File(newLogPath);
                if(localLog.renameTo(rotatedFile)){
                    System.out.println("File was successfully renamed");
                }
                InputStream inputStream = new FileInputStream(rotatedFile);
                System.out.println("[Uploading Log]:     " + newLogFileName);
                boolean done = ftpClient.storeFile(newLogFileName, inputStream);//variable to see if file was successfully transferred
                inputStream.close();
                if (done) {
                    System.out.println(newLogFileName + " was uploaded successfully");
                    localLog.delete();//Delete old log
                    rotatedFile.delete();//Deleted newly created rotated log
                } else {
                    System.out.println(ftpClient.getReplyCode());
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } catch (InterruptedException ex) {
                System.out.println("Shutting down thread");
            }
        }
    }
    /**
     * Logic to provide facility to change old filename to the same file but with date/time appended to the name.
     */
    public String newFileName(){
        int indexOfLogExtension = fileName.indexOf(".log");
        String fileWithDate = fileName.substring(0, indexOfLogExtension) + dateFormatter.format(new Date()) + fileName.substring(indexOfLogExtension);
        return fileWithDate;
    }
}

